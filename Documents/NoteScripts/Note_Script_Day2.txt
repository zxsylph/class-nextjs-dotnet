================================
üõ¥ Workshop .NET 8 with NextJS14  üõ¥
================================
‚úà DAY 1
1: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ö‡∏ô Mac ‡πÅ‡∏•‡∏∞ Windows
2: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ .NET Core 8
3: ‡∏™‡∏£‡πâ‡∏≤‡∏á .NET 8 Rest API
-------------------------------------------------------
üõ†1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°
üíª .NET SDK 8.x
---
dotnet --version

üíª Node JS 18.x and up
---
node -v
npm -v

üíª PostgreSQL 15 and up
---
psql --version

üíª Docker Desktop
---
docker --version

üíª Git
---
git version

üíª VSCode
---
code -v

2: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ .NET Core 8
---
‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà .NET 6 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡∏°‡∏≤ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á API ‡πÑ‡∏î‡πâ 2 approaches ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ 

1. controller-based APIs
2. minimal APIs

Minimal API: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ quickly ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö

Controller-based API: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏™‡∏π‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°

Minimal API:
---
‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:

‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å
‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ lambda expression
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö async/await ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

‡∏à‡∏∏‡∏î‡∏î‡πâ‡∏≠‡∏¢:

‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏µ‡∏à‡∏≥‡∏Å‡∏±‡∏î
‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ routing ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô

Controller-based API:
---
‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:

‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏á‡πà‡∏≤‡∏¢
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö middleware
‡∏à‡∏∏‡∏î‡∏î‡πâ‡∏≠‡∏¢:

‡πÇ‡∏Ñ‡πâ‡∏î‡∏¢‡∏≤‡∏ß ‡∏¢‡∏∏‡πà‡∏á‡∏¢‡∏≤‡∏Å
‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏î‡πâ‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤ Minimal API

3: ‡∏™‡∏£‡πâ‡∏≤‡∏á .NET 8 Rest API

üöÄ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå .NET Core Web API ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô .NET 8
---
Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏ö‡∏£‡∏°‡∏ô‡∏µ‡πâ
---
mkdir NetCoreWithNextJS

Step 2: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
---
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Web APIs ‡πÅ‡∏ö‡∏ö Minimal APIs
---
dotnet new webapi -o MinimalAPI

‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Web APIs ‡πÅ‡∏ö‡∏ö Controller-based APIs
---
dotnet new webapi --use-controllers -o ControllerAPI

Step 3: ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô VSCode
---
code MinimalAPI
or
code ControllerAPI

Step 4: ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
---
dotnet watch run

üíª ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á REST API ‡∏î‡πâ‡∏ß‡∏¢ .NET Web API ‡πÅ‡∏ö‡∏ö Controller-base APIs
---
Step 1: ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå ControllerAPI ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå Controller/WeatherForecastController.cs
‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå WeatherForecast.cs

Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á model ‡πÉ‡∏ô Models/User
---
namespace WebApi.Models;
public class User
{
    public int Id { get; set; }
    public required string Username { get; set; }
    public required string Email { get; set; }
    public required string Fullname { get; set; }
}


Step 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á UserController ‡πÉ‡∏ô Controllers
---
using Microsoft.AspNetCore.Mvc;
using WebApi.Models;

namespace WebApi.Controllers;

[ApiController]
[Route("api/[controller]")] // api/User
public class UserController : ControllerBase
{
    // mock data for users
    private static readonly List<User> _users = new List<User>
    {
        new User { 
            Id = 1, 
            Username = "john", 
            Email = "john@email.com", 
            Fullname = "John Doe"
        },
        new User { 
            Id = 2, 
            Username = "samit", 
            Email = "samit@email.com", 
            Fullname = "Samit Koyom"
        },
    };

    // GET: api/User
    [HttpGet]
    public ActionResult<IEnumerable<User>> GetUsers()
    {
        // IEnumerable ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
        // IEnumerable ‡πÄ‡∏õ‡πá‡∏ô interface ‡πÉ‡∏ô .NET Framework ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô collection ‡∏Ç‡∏≠‡∏á object
        // interface ‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î method ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ñ‡∏∑‡∏≠ GetEnumerator()
        // GetEnumerator() : method ‡∏ô‡∏µ‡πâ return enumerator
        // enumerator : object ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡∏ú‡πà‡∏≤‡∏ô collection
        // ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ IEnumerable ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á users

        // ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡∏ú‡πà‡∏≤‡∏ô collection ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ foreach
        // foreach (var user in _users)
        // {
        //     Console.WriteLine($"{user.Id} - {user.Username}");
        // }

        return Ok(_users);
    }

    // GET: api/User/{id}
    [HttpGet("{id}")]
    public ActionResult<User> GetUser(int id)
    {
        var user = _users.Find(u => u.Id == id); // find user by id
        if (user == null)
        {
            return NotFound();
        }
        return Ok(user);
    }


    // POST: api/User
    [HttpPost]
    public ActionResult<User> CreateUser([FromBody] User user)
    {
        _users.Add(user);
        return CreatedAtAction(nameof(GetUser), new { id = user.Id }, user);
    }

    // PUT: api/User/{id}
    [HttpPut("{id}")]
    public IActionResult UpdateUser(int id, [FromBody] User user)
    {
        // Validate user id
        if (id != user.Id)
        {
            return BadRequest();
        }

        // Find existing user
        var existingUser = _users.Find(u => u.Id == id);
        if (existingUser == null)
        {
            return NotFound();
        }

        // Update user
        existingUser.Username = user.Username;
        existingUser.Email = user.Email;
        existingUser.Fullname = user.Fullname;

        // Return updated user
        return Ok(existingUser);
    }

    // DELETE: api/User/2
    [HttpDelete("{id}")]
    public ActionResult DeleteUser(int id)
    {
        // Find existing user
        var user = _users.Find(u => u.Id == id);

        if (user == null)
        {
            return NotFound();
        }

        // Remove user from list
        _users.Remove(user);
        return NoContent();
    }


}

‚úà DAY 2
4:  Entity Framework Core ‡πÉ‡∏ô .NET 8 
5: .NET 8 Rest API CRUD with EFCore
-------------------------------------------------------
üöÄ WORKSHOP: StoreAPI with EF8 and PostgreSQL

"‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô EFCore ‡πÅ‡∏ö‡∏ö Database first"

Step 1: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PostgresSQL
---
‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ‡∏ä‡∏∑‡πà‡∏≠ "storedb"
---
CREATE DATABASE storedb;

Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á "categories" ‡πÅ‡∏•‡∏∞ "products"
---
Category table query
---
CREATE TABLE categories (
  category_id SERIAL PRIMARY KEY,
  category_name VARCHAR(128) NOT NULL,
  category_status INTEGER NOT NULL
);

Products table query
---
CREATE TABLE products (
  product_id SERIAL PRIMARY KEY,
  category_id INTEGER REFERENCES categories(category_id) ON DELETE SET NULL,
  product_name VARCHAR(50),
  unit_price DECIMAL(18, 0),
  product_picture VARCHAR(1024),
  unit_in_stock INTEGER,
  created_date TIMESTAMP,
  modified_date TIMESTAMP
);

Step 3: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á categories ‡πÅ‡∏•‡∏∞ products
---
categories
---
INSERT INTO categories (
    category_name,
    category_status
)

VALUES
(
    'Mobile',
    1
),
(
    'Tablet',
    1
),
(
    'Smart Watch',
    1
),
(
    'Labtop',
    1
);

products
---
INSERT INTO products (
    category_id,
    product_name,
    unit_price,
    product_picture,
    unit_in_stock,
    created_date,
    modified_date
)

VALUES
(
    1,
    'iPhone 13 Pro Max',
    55000,
    'https://www.mxphone.com/wp-content/uploads/2021/04/41117-79579-210401-iPhone12ProMax-xl-1200x675.jpg',
    3,
    '2021-11-22T00:00:00',
    '2021-11-22T00:00:00'
),
(
    2,
    'iPad Pro 2021',
    18500,
    'https://cdn.siamphone.com/spec/apple/images/ipad_pro_12.9%E2%80%91inch/com_1.jpg',
    10,
    '2021-11-20T00:00:00',
    '2021-11-20T00:00:00'
),
(
    3,
    'Airpods Pro',
    12500,
    'https://support.apple.com/library/content/dam/edam/applecare/images/en_US/airpods/airpods-pro-2gen-front-case.png',
    5,
    '2021-11-10T10:30:00',
    '2021-11-12T10:30:00'
),
(
    4,
    'Macbook Pro M1',
    45000,
    'https://cdn.mos.cms.futurecdn.net/iYCQTPgBSdDmkYESfPkunh.jpg',
    10,
    '2021-11-15T10:30:00',
    '2021-11-15T10:30:00'
);


Step 4: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå Web API ‡πÅ‡∏ö‡∏ö Controller-base APIs
---
dotnet new webapi --use-controllers -o StoreAPI

Step 5: ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ VSCode
---
code StoreAPI -r

Step 6: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
---
dotnet watch run

Step 7: Install NuGet Packages for EF8 and Postgresql
---
dotnet add package Microsoft.EntityFrameworkCore --version 8.0.0

dotnet add package Microsoft.EntityFrameworkCore.Design --version 8.0.0

dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL --version 8.0.0

dotnet add package Microsoft.EntityFrameworkCore.Relational --version 8.0.0

Step 8: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á dotnet-ef cli
---
‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
dotnet ef --version

‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô
dotnet tool install --global dotnet-ef

‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
dotnet tool update --global dotnet-ef

Step 9: ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Scaffold-DbContext ( Reverse engineer)
---
Windows Command Prompt
---
dotnet ef dbcontext scaffold "Host=localhost;Port=5432;Database=storedb;Username=postgres;Password=123456" ^
Npgsql.EntityFrameworkCore.PostgreSQL ^
--output-dir "Models" ^
--context ApplicationDbContext ^
--use-database-names ^
--no-onconfiguring ^
--force


MacOS/Linux Terminal
---
dotnet ef dbcontext scaffold "Host=localhost;Port=5432;Database=storedb;Username=postgres;Password=123456" \
Npgsql.EntityFrameworkCore.PostgreSQL \
--output-dir "Models" \
--context ApplicationDbContext \
--use-database-names \
--no-onconfiguring \
--force

Custom
---
dotnet ef dbcontext scaffold "Host=10.35.26.140;Port=5432;Database=class_nextjs_dotnet;Username=class_nextjs_dotnet;Password=$PASSWORD" \
Npgsql.EntityFrameworkCore.PostgreSQL \
--output-dir "Models" \
--context ApplicationDbContext \
--use-database-names \
--no-onconfiguring \
--force

Step 10: ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå ApplicationDbContext ‡πÑ‡∏õ‡πÑ‡∏ß‡πâ‡∏¢‡∏±‡∏á Data/ApplicationDbContext.cs
--
using Microsoft.EntityFrameworkCore;
using StoreAPI.Models;

namespace StoreAPI.Data;

public partial class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<category> categories { get; set; }

    public virtual DbSet<product> products { get; set; }

}

Step 11: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Connection String ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PostgreSQL ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå appsettings.json
---
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "ConnectionStrings": {
    "DefaultConnection": "Host=localhost;Port=5432;Database=storedb;Username=postgres;Password=123456"
  },
  "AllowedHosts": "*"
}

Step 12: ‡πÄ‡∏û‡∏¥‡πà‡∏° Config "DefaultConnection" ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå Program.cs
---
using Microsoft.EntityFrameworkCore;
using StoreAPI.Data;
.
.
// For Entity Framework with Npgsql
builder.Services.AddDbContext<ApplicationDbContext>(options =>
{
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection"));
});

Step 12: ‡∏™‡∏£‡πâ‡∏≤‡∏á ProductControllers.cs
---
using Microsoft.AspNetCore.Mvc;
using StoreAPI.Data;
using StoreAPI.Models;

namespace StoreAPI.Controllers;

[ApiController]
[Route("api/[controller]")]
public class ProductController: ControllerBase
{
.
.
.
}
